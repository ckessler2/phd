#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Mar 20 14:45:00 2025

@author: ck2049
"""

import onnx
from onnx2keras import onnx_to_keras
import numpy as np
import tensorflow as tf

# def generate_adversarial_example(model, x, y, epsilon):
#     """
#     Generates an adversarial example for a given input using the Fast Gradient Sign Method (FGSM).

#     Args:
#         x (tf.Tensor): The input data (features) for which the adversarial example is generated.
#         y (tf.Tensor): The true labels corresponding to the input data.

#     Returns:
#         tf.Tensor: The adversarial example generated by perturbing the input data within the epsilon-ball.
#     """
#     with tf.GradientTape() as tape:
#         tape.watch(tf.convert_to_tensor(x))
#         prediction = model.predict(x)
#         # Use the MeanSquaredError instance
#         loss_fn = tf.keras.losses.MeanSquaredError()
#         loss = loss_fn(y, prediction)

#     # Calculate the gradient of the loss with respect to the input
#     gradient = tape.gradient(loss, x)

#     # Extract the sign of the gradient
#     signed_grad = tf.sign(gradient)

#     # Create the adversarial example by adding a small perturbation within the epsilon-ball
#     adversarial_x = x + epsilon * signed_grad
#     return adversarial_x



# Load ONNX model
onnx_model1 = onnx.load('base_model_norm.onnx')
onnx_model2 = onnx.load('adversarial_model_0.001.onnx')
k_model1 = onnx_to_keras(onnx_model1,['x'], name_policy='short')
k_model2 = onnx_to_keras(onnx_model2,['x'], name_policy='short')

onnx_model3 = onnx.load('base_model_merged.onnx')
k_model3 = onnx_to_keras(onnx_model3,['x'], name_policy='short')

counterexample =[ 5.0e-4, 0.534515, 0.396457, 0.0, 0.33818, 0.284731, 0.0, 0.0, 0.534515, 0.396457, 0.0, 0.33818, 0.284731, 0.0 ]


x = np.float32(np.array(counterexample))

x1 = x[0:7]
x2 = x[7:14]

eps = abs(x1-x2)[0]

# print("Epsilon (dim 1) = " + str(eps))

# y1 = k_model1.predict(np.expand_dims(x1, axis=0))
# y2 = k_model1.predict(np.expand_dims(x2, axis=0))


# L1 = abs(y2-y1)[0][0]/(eps)
# print("L (base model) = " + str(L1))

# y3 = k_model2.predict(np.expand_dims(x1, axis=0))
# y4 = k_model2.predict(np.expand_dims(x2, axis=0))

# L2 = abs(y3-y4)[0][0]/(eps)
# print("L (adversarial model) = " + str(L2))

y5 = k_model3.predict(np.expand_dims(counterexample, axis=0))

# %%
print("[ex, ex2] = " + str(y5[0]))

print("ex - ex2 = " + str(y5[0][0] - y5[0][1]))
